// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	ent "github.com/Dominic0512/serverless-auth-boilerplate/ent"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: user
func (_m *UserRepository) Create(user ent.User) (*ent.User, error) {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(ent.User) (*ent.User, error)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(ent.User) *ent.User); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(ent.User) error); ok {
		r1 = rf(user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *UserRepository) Delete(id uuid.UUID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields:
func (_m *UserRepository) Find() ([]*ent.User, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 []*ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*ent.User, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*ent.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: id
func (_m *UserRepository) FindOne(id uuid.UUID) (*ent.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for FindOne")
	}

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID) (*ent.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID) *ent.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, properties
func (_m *UserRepository) Update(id uuid.UUID, properties ent.User) (*ent.User, error) {
	ret := _m.Called(id, properties)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *ent.User
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, ent.User) (*ent.User, error)); ok {
		return rf(id, properties)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, ent.User) *ent.User); ok {
		r0 = rf(id, properties)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.User)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, ent.User) error); ok {
		r1 = rf(id, properties)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
