// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/Dominic0512/serverless-auth-boilerplate/infra/database"

	ent "github.com/Dominic0512/serverless-auth-boilerplate/ent"

	mock "github.com/stretchr/testify/mock"
)

// UserProviderRepository is an autogenerated mock type for the UserProviderRepository type
type UserProviderRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, tx, userProvider
func (_m *UserProviderRepository) Create(ctx context.Context, tx database.Tx, userProvider ent.UserProvider) (*ent.UserProvider, error) {
	ret := _m.Called(ctx, tx, userProvider)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *ent.UserProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Tx, ent.UserProvider) (*ent.UserProvider, error)); ok {
		return rf(ctx, tx, userProvider)
	}
	if rf, ok := ret.Get(0).(func(context.Context, database.Tx, ent.UserProvider) *ent.UserProvider); ok {
		r0 = rf(ctx, tx, userProvider)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.UserProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, database.Tx, ent.UserProvider) error); ok {
		r1 = rf(ctx, tx, userProvider)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserProviderRepository creates a new instance of UserProviderRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserProviderRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserProviderRepository {
	mock := &UserProviderRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
