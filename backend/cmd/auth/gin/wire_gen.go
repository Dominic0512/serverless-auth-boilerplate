// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Dominic0512/serverless-auth-boilerplate/cmd/auth/gin/app"
	"github.com/Dominic0512/serverless-auth-boilerplate/cmd/auth/router"
	"github.com/Dominic0512/serverless-auth-boilerplate/controller"
	"github.com/Dominic0512/serverless-auth-boilerplate/infra/authenticator"
	"github.com/Dominic0512/serverless-auth-boilerplate/infra/config"
	"github.com/Dominic0512/serverless-auth-boilerplate/infra/database"
	"github.com/Dominic0512/serverless-auth-boilerplate/infra/framework"
	"github.com/Dominic0512/serverless-auth-boilerplate/infra/runner"
	"github.com/Dominic0512/serverless-auth-boilerplate/pkg/helper"
	"github.com/Dominic0512/serverless-auth-boilerplate/pkg/validate"
	"github.com/Dominic0512/serverless-auth-boilerplate/repository"
	"github.com/Dominic0512/serverless-auth-boilerplate/route"
	"github.com/Dominic0512/serverless-auth-boilerplate/service"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func InitializeApp() (*app.App, error) {
	engine := framework.NewGinFramework()
	baseRoute := route.NewBaseRoute(engine)
	validator := validate.NewValidator()
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	psqlDatabase, err := database.NewPSQLDatabase(configConfig)
	if err != nil {
		return nil, err
	}
	entTxHelper := helper.NewEntTxHelper(psqlDatabase)
	userRepository := repository.NewUserRepository(psqlDatabase)
	userProviderRepository := repository.NewUserProviderRepository(psqlDatabase)
	auth0Authenticator, err := authenticator.NewAuth0Authenticator(configConfig)
	if err != nil {
		return nil, err
	}
	authService := service.NewAuthService(entTxHelper, userRepository, userProviderRepository, auth0Authenticator)
	bcryptPasswordHelper := helper.NewBcryptPasswordHelper()
	userService := service.NewUserService(entTxHelper, userRepository, userProviderRepository, bcryptPasswordHelper)
	authController := controller.NewAuthController(validator, authService, userService)
	authRoute := route.NewAuthRoute(engine, authController)
	routes := router.NewRouter(baseRoute, authRoute)
	ginRunner := runner.NewGinRunner(engine)
	appApp, err := app.NewApp(routes, ginRunner)
	if err != nil {
		return nil, err
	}
	return appApp, nil
}
