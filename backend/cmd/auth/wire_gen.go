// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/Dominic0512/serverless-auth-boilerplate/controller"
	"github.com/Dominic0512/serverless-auth-boilerplate/infra/app"
	"github.com/Dominic0512/serverless-auth-boilerplate/infra/config"
	"github.com/Dominic0512/serverless-auth-boilerplate/infra/database"
	"github.com/Dominic0512/serverless-auth-boilerplate/infra/router"
	"github.com/Dominic0512/serverless-auth-boilerplate/infra/runner"
	"github.com/Dominic0512/serverless-auth-boilerplate/pkg/validate"
	"github.com/Dominic0512/serverless-auth-boilerplate/repository"
	"github.com/Dominic0512/serverless-auth-boilerplate/route"
	"github.com/Dominic0512/serverless-auth-boilerplate/service"
)

import (
	_ "github.com/lib/pq"
)

// Injectors from wire.go:

func InitializeApp() (*app.FunctionApp, error) {
	engine := router.NewRouter()
	baseRoute := route.NewBaseRoute(engine)
	configConfig, err := config.NewConfig()
	if err != nil {
		return nil, err
	}
	databaseDatabase, err := database.NewDatabase(configConfig)
	if err != nil {
		return nil, err
	}
	userRepository := repository.NewUserRepository(databaseDatabase)
	userService := service.NewUserService(userRepository)
	validator := validate.NewValidator()
	authController := controller.NewAuthController(userService, validator)
	authRoute := route.NewAuthRoute(engine, authController)
	routes := route.NewRoute(baseRoute, authRoute)
	lambdaRunner := runner.NewLambdaRunner(engine)
	functionApp, err := app.NewFunctionApp(routes, lambdaRunner)
	if err != nil {
		return nil, err
	}
	return functionApp, nil
}
